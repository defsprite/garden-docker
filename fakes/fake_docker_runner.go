// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/julz/garden-docker"
	"github.com/julz/garden-docker/dockercli"
)

type FakeDockerRunner struct {
	RunStub        func(dockercli.RunCmd) (string, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 dockercli.RunCmd
	}
	runReturns struct {
		result1 string
		result2 error
	}
	InspectStub        func(dockercli.InspectCmd) (string, error)
	inspectMutex       sync.RWMutex
	inspectArgsForCall []struct {
		arg1 dockercli.InspectCmd
	}
	inspectReturns struct {
		result1 string
		result2 error
	}
}

func (fake *FakeDockerRunner) Run(arg1 dockercli.RunCmd) (string, error) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 dockercli.RunCmd
	}{arg1})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(arg1)
	} else {
		return fake.runReturns.result1, fake.runReturns.result2
	}
}

func (fake *FakeDockerRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeDockerRunner) RunArgsForCall(i int) dockercli.RunCmd {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].arg1
}

func (fake *FakeDockerRunner) RunReturns(result1 string, result2 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDockerRunner) Inspect(arg1 dockercli.InspectCmd) (string, error) {
	fake.inspectMutex.Lock()
	fake.inspectArgsForCall = append(fake.inspectArgsForCall, struct {
		arg1 dockercli.InspectCmd
	}{arg1})
	fake.inspectMutex.Unlock()
	if fake.InspectStub != nil {
		return fake.InspectStub(arg1)
	} else {
		return fake.inspectReturns.result1, fake.inspectReturns.result2
	}
}

func (fake *FakeDockerRunner) InspectCallCount() int {
	fake.inspectMutex.RLock()
	defer fake.inspectMutex.RUnlock()
	return len(fake.inspectArgsForCall)
}

func (fake *FakeDockerRunner) InspectArgsForCall(i int) dockercli.InspectCmd {
	fake.inspectMutex.RLock()
	defer fake.inspectMutex.RUnlock()
	return fake.inspectArgsForCall[i].arg1
}

func (fake *FakeDockerRunner) InspectReturns(result1 string, result2 error) {
	fake.InspectStub = nil
	fake.inspectReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

var _ gardendocker.DockerRunner = new(FakeDockerRunner)
